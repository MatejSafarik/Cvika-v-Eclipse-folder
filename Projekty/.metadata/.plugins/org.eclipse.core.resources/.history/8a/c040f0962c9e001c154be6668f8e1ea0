

import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.Comparator;
  
// node class je zakladna struktura; kazdy HuffmanNode representuje node v Huffmanovom strome
class HuffmanNode {
  
    int data;
    char c;
  
    HuffmanNode left;
    HuffmanNode right;
}
  
// comparator classa porovnavat node; porovnava ich velkost
class MyComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode x, HuffmanNode y)
    {
  
        return x.data - y.data;
    }
}
  
public class Huffman {
  
	// recursivna funkcia na tlacenie Huffmanovho kodu do stromu, tu sa generuje Hufmanov strom
    public static void printCode(HuffmanNode root, String s)
    {
  
    	// ak prava aj lava vetva su nulove tak vytvorime list; kod je vytvarany pocas presunu cez strom
        if (root.left
                == null
            && root.right
                   == null
            && Character.isLetter(root.c)) {
  
        	// c je pismeno v node
            System.out.println(root.c + ":" + s);
  
            return;
        }
  
        // ak ideme vlavo tak do kodu dame 0; ak ideme vpravo tak do kodu dame 1
  
        // rekurzivne volame lavy a pravy pod strom generovaneho stromu
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }
  
    // funkcia main
    public static void main(String[] args)
    {
  
        Scanner s = new Scanner(System.in);
  
        // tu zadavame pocet znakov ktore chceme nacitat 
        //nasledne znaky ktore chceme nacitat
        //a nasledne hodnotu k danym znakom
        // priklad formatu:
        //9
        //'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'
        //4, 13, 17, 11, 9, 21, 51, 61, 7
        int n = 9;
        char[] charArray = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i' };
        int[] charfreq = { 4, 13, 17, 11, 9, 21, 51, 61, 7 };
  
        // creating a priority queue q.
        // makes a min-priority queue(min-heap).
        PriorityQueue<HuffmanNode> q
            = new PriorityQueue<HuffmanNode>(n, new MyComparator());
  
        for (int i = 0; i < n; i++) {
  
            // creating a Huffman node object
            // and add it to the priority queue.
            HuffmanNode hn = new HuffmanNode();
  
            hn.c = charArray[i];
            hn.data = charfreq[i];
  
            hn.left = null;
            hn.right = null;
  
            // add functions adds
            // the huffman node to the queue.
            q.add(hn);
        }
  
        // create a root node
        HuffmanNode root = null;
  
        // Here we will extract the two minimum value
        // from the heap each time until
        // its size reduces to 1, extract until
        // all the nodes are extracted.
        while (q.size() > 1) {
  
            // first min extract.
            HuffmanNode x = q.peek();
            q.poll();
  
            // second min extract.
            HuffmanNode y = q.peek();
            q.poll();
  
            // new node f which is equal
            HuffmanNode f = new HuffmanNode();
  
            // to the sum of the frequency of the two nodes
            // assigning values to the f node.
            f.data = x.data + y.data;
            f.c = '-';
  
            // first extracted node as left child.
            f.left = x;
  
            // second extracted node as the right child.
            f.right = y;
  
            // marking the f node as the root node.
            root = f;
  
            // add this node to the priority-queue.
            q.add(f);
        }
  
        // print the codes by traversing the tree
        printCode(root, "");
    }
}
  
// This code is contributed by Kunwar Desh Deepak Singh

